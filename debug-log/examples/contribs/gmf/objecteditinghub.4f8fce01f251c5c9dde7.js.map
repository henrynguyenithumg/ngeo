{"version":3,"sources":["webpack:///./contribs/gmf/examples/objecteditinghub.js"],"names":["__webpack_require__","exports","module","angular","_XSDAttributes2","default","name","_Manager2","_Themes2","value","constant","MainController","$http","$q","$scope","gmfThemes","gmfXSDAttributes","_this","this","http_","q_","gmfThemes_","gmfXSDAttributes_","urls","url","viewerUrlDev_","viewerUrlHosted_","selectedUrl","gmfServers_","gmfServer_","gmfLayerNodes","selectedGmfLayerNode","featuresCache_","features","selectedFeature","geomTypeCache_","selectedGeomType","undefined","$watch","newVal","oldVal","getFeatures_","then","handleGetFeatures_","bind","getGeometryType_","handleGetGeometryType_","themeName","loadThemes","getOgcServersObject","ogcServers","getThemesObject","themes","i","ii","theme","length","groupNode","children","_asserts2","assert","ogcServer","gmfServer","wfsSupport","urlWfs","metadata","identifierAttributeField","push","prototype","runEditor","geomType","feature","layer","id","property","get","params","Param","GEOM_TYPE","ID","LAYER","THEME","PROPERTY","appendParams","window","open","runViewerDev","runViewer_","runViewerHosted","baseUrl","node","nodeId","nodeName","nodeIdAttrFieldName","ids","join","gmfLayerNode","getFeaturesDeferred_","defer","getFeaturesFromCache_","resolve","issueGetFeatures_","promise","_this2","SERVICE","REQUEST","VERSION","TYPENAME","layers","response","_WFS2","readFeatures","data","getGeometryTypeDeferred_","getGeometryTypeFromCache_","issueGetAttributesRequest_","getAttributes","attributes","geomAttr","_XSDAttribute2","getGeometryAttribute","uri","keyParams","Object","keys","forEach","k","encodeURIComponent","qs","replace","indexOf","controller"],"mappings":"uJAKAA,EAAA,KACA,QAAAA,EAAA,QAEAA,EAAA,UACAA,EAAA,UACAA,EAAA,SACAA,EAAA,UACAA,EAAA,yDATA,IAAMC,KAaNA,EAAQC,OAASC,QAAQD,OAAO,UAC9B,UACAE,EAAAC,QAAwBH,OAAOI,KAC/BC,EAAAF,QAAwBH,OAAOI,KAC/BE,EAAAH,QAAeH,OAAOI,OAIxBL,EAAQC,OAAOO,MAAM,aACnB,0FAGFR,EAAQC,OAAOO,MAAM,eACnB,2DAEFR,EAAQC,OAAOQ,SAAS,eAAgB,QACxCT,EAAQC,OAAOQ,SAAS,sBAAuB,yCAY/CT,EAAQU,eAAiB,SAASC,EAAOC,EAAIC,EAAQC,EAAWC,GAAkB,IAAAC,EAAAC,KAMhFA,KAAKC,MAAQP,EAMbM,KAAKE,GAAKP,EAMVK,KAAKG,WAAaN,EAMlBG,KAAKI,kBAAoBN,EAOzBE,KAAKK,OAEDjB,KAAQ,uBACRkB,IAAO,iBAGPlB,KAAQ,oBACRkB,IAAO,oBAGPlB,KAAQ,UACRkB,IAAO,uBAQXN,KAAKO,cAAgB,kBAMrBP,KAAKQ,iBAAmB,eAMxBR,KAAKS,YAAcT,KAAKK,KAAK,GAM7BL,KAAKU,YAMLV,KAAKW,WAMLX,KAAKY,iBAMLZ,KAAKa,qBAAuB,KAM5Bb,KAAKc,kBAMLd,KAAKe,SAAW,KAMhBf,KAAKgB,gBAAkB,KAMvBhB,KAAKiB,kBAMLjB,KAAKkB,sBAAmBC,EAExBvB,EAAOwB,OACL,kBAAMrB,EAAKc,sBACX,SAACQ,EAAQC,GACPvB,EAAKiB,gBAAkB,KAEnBK,IACFtB,EAAKwB,aAAaF,GAAQG,KACxBzB,EAAK0B,mBAAmBC,KAAxB3B,EAAmCsB,IAErCtB,EAAK4B,iBAAiBN,GAAQG,KAC5BzB,EAAK6B,uBAAuBF,KAA5B3B,EAAuCsB,OAU/CrB,KAAK6B,UAAY,gBAEjB7B,KAAKG,WAAW2B,aAEhB9B,KAAKG,WAAW4B,sBAAsBP,KAAK,SAACQ,GAG1CjC,EAAKW,YAAcsB,EAEnBjC,EAAKI,WAAW8B,kBAAkBT,KAAK,SAACU,GACtC,GAAKA,EAAL,CAIA,IAAIC,SAAGC,SAGHC,SACJ,IAAKF,EAAI,EAAGC,EAAKF,EAAOI,OAAQH,EAAIC,EAAID,IACtC,GAAID,EAAOC,GAAG/C,OAASW,EAAK8B,UAAW,CACrCQ,EAAQH,EAAOC,GACf,MAIJ,GAAKE,EAAL,CAKA,IAAME,EAAYF,EAAMG,SAAS,GAGjCC,EAAAtD,QAAYuD,OAAOH,EAAUI,WAC7B,IAAMC,EAAY7C,EAAKW,YAAY6B,EAAUI,WAC7C,GAAIC,IAAsC,IAAzBA,EAAUC,YAAuBD,EAAUE,OAA5D,CACE/C,EAAKY,WAAaiC,EAKpB,IAAMhC,KACN,IAAKuB,EAAI,EAAGC,EAAKG,EAAUC,SAASF,OAAQH,EAAIC,EAAID,IAC9CI,EAAUC,SAASL,GAAGY,SAASC,0BACjCpC,EAAcqC,KAAKV,EAAUC,SAASL,IAK1CpC,EAAKa,cAAgBA,EAGrBb,EAAKc,qBAAuBd,EAAKa,cAAc,WA9LrD7B,EAAQU,8EAyMRV,EAAQU,eAAeyD,UAAUC,UAAY,WAE3C,IAAMC,EAAWpD,KAAKkB,iBAChBmC,EAAUrD,KAAKgB,gBACfsC,EAAQtD,KAAKa,qBAAqB0C,GAClCC,EAAWxD,KAAKa,qBAAqBkC,SAASC,yBACpDP,EAAAtD,QAAYuD,YAAoBvB,IAAbqC,GACnB,IAAMD,EAAKF,EAAQI,IAAID,GAEjBE,KACNA,EAAOrE,EAAAF,QAAwBwE,MAAMC,WAAaR,EAClDM,EAAOrE,EAAAF,QAAwBwE,MAAME,IAAMN,EAC3CG,EAAOrE,EAAAF,QAAwBwE,MAAMG,OAASR,EAC9CI,EAAOrE,EAAAF,QAAwBwE,MAAMI,OAAS/D,KAAK6B,UACnD6B,EAAOrE,EAAAF,QAAwBwE,MAAMK,UAAYR,EAEjD,IAAMlD,EAAMvB,EAAQU,eAAewE,aAAajE,KAAKS,YAAL,IAAyBiD,GACzEQ,OAAOC,KAAK7D,IAOdvB,EAAQU,eAAeyD,UAAUkB,aAAe,WAC9CpE,KAAKqE,WAAWrE,KAAKO,gBAOvBxB,EAAQU,eAAeyD,UAAUoB,gBAAkB,WACjDtE,KAAKqE,WAAWrE,KAAKQ,mBAQvBzB,EAAQU,eAAeyD,UAAUmB,WAAa,SAASE,GAErD,IAAMC,EAAOxE,KAAKa,qBACZ4D,EAASD,EAAKjB,GACdmB,EAAWF,EAAKpF,KAChBuF,EAAsBH,EAAKzB,SAASC,yBAC1CP,EAAAtD,QAAYuD,YAA+BvB,IAAxBwD,GAInB,IAHA,IAAMC,KAEA7D,EAAWf,KAAKc,eAAe2D,GAC5BtC,EAAI,EAAGC,EAAKrB,EAASuB,OAAQH,EAAIC,EAAID,IAC5CyC,EAAI3B,KACFlC,EAASoB,GAAGsB,IAAIkB,IAIpB,IAAMjB,KACNA,EAAA,UAAsBgB,EACtBhB,SAAciB,GAAyBC,EAAIC,KAAK,KAEhD,IAAMvE,EAAMvB,EAAQU,eAAewE,aAAaM,EAASb,GACzDQ,OAAOC,KAAK7D,IASdvB,EAAQU,eAAeyD,UAAU3B,aAAe,SAASuD,GAYvD,OAVA9E,KAAK+E,qBAAuB/E,KAAKE,GAAG8E,QAEnBhF,KAAKiF,sBAAsBH,GAG1C9E,KAAK+E,qBAAqBG,UAE1BlF,KAAKmF,kBAAkBL,GAGlB9E,KAAK+E,qBAAqBK,SAQnCrG,EAAQU,eAAeyD,UAAUiC,kBAAoB,SAASL,GAAc,IAAAO,EAAArF,KAEpEuD,EAAKuB,EAAavB,GAElBjD,EAAMvB,EAAQU,eAAewE,aACjCjE,KAAKW,WAAWmC,QAEdwC,QAAW,MACXC,QAAW,aACXC,QAAW,QACXC,SAAYX,EAAaY,SAI7B1F,KAAKC,MAAMwD,IAAInD,GAAKkB,KAAK,SAACmE,GACxB,IAAM5E,GAAW,IAAA6E,EAAAzG,SAAkB0G,aAAaF,EAASG,MACzDT,EAAKvE,eAAeyC,GAAMxC,EAC1BsE,EAAKN,qBAAqBG,aAS9BnG,EAAQU,eAAeyD,UAAUzB,mBAAqB,SAASqD,GAC7D,IAAM/D,EACJf,KAAKiF,sBAAsBH,GAC7B9E,KAAKe,SAAWA,EAChBf,KAAKgB,gBAAkBhB,KAAKe,SAAS,IASvChC,EAAQU,eAAeyD,UAAU+B,sBAAwB,SAASH,GAChE,IAAMvB,EAAKuB,EAAavB,GAExB,OADiBvD,KAAKc,eAAeyC,IAAO,MAU9CxE,EAAQU,eAAeyD,UAAUvB,iBAAmB,SAASmD,GAY3D,OAVA9E,KAAK+F,yBAA2B/F,KAAKE,GAAG8E,QAEvBhF,KAAKgG,0BAA0BlB,GAG9C9E,KAAK+F,yBAAyBb,UAE9BlF,KAAKiG,2BAA2BnB,GAG3B9E,KAAK+F,yBAAyBX,SAQvCrG,EAAQU,eAAeyD,UAAU+C,2BAA6B,SAC5DnB,GAGA9E,KAAKI,kBAAkB8F,cAAcpB,EAAavB,IAAI/B,KACpD,SAASsD,EAAcqB,GAErB,IAAMC,EAAWC,EAAAlH,QAAuBmH,qBAAqBH,GACzDC,GAAYA,EAAShD,WACvBpD,KAAKiB,eAAe6D,EAAavB,IAAM6C,EAAShD,SAChDpD,KAAK+F,yBAAyBb,YAEhCxD,KAAK1B,KAAM8E,KAUjB/F,EAAQU,eAAeyD,UAAUtB,uBAAyB,SAASkD,GACjE,IAAM1B,EAAWpD,KAAKgG,0BAA0BlB,GAChD9E,KAAKkB,iBAAmBkC,GAS1BrE,EAAQU,eAAeyD,UAAU8C,0BAA4B,SAC3DlB,GAEA,IAAMvB,EAAKuB,EAAavB,GAExB,OADiBvD,KAAKiB,eAAesC,IAavCxE,EAAQU,eAAewE,aAAe,SAASsC,EAAK7C,GAClD,IAAM8C,KAENC,OAAOC,KAAKhD,GAAQiD,QAAQ,SAACC,GACT,OAAdlD,EAAOkD,SAA6BzF,IAAduC,EAAOkD,IAC/BJ,EAAUvD,KAAQ2D,EAAlB,IAAuBC,mBAAmBnD,EAAOkD,OAGrD,IAAME,EAAKN,EAAU3B,KAAK,KAK1B,OADA0B,GAA4B,KAF5BA,EAAMA,EAAIQ,QAAQ,QAAS,KAEjBC,QAAQ,KAAiBT,EAA7B,IAAyCA,EAAzC,KACOO,GAIf/H,EAAQC,OAAOiI,WAAW,iBAAkBlI,EAAQU,0BAGrCV","file":"objecteditinghub.4f8fce01f251c5c9dde7.js","sourcesContent":["/**\n * @module gmfapp.objecteditinghub\n */\nconst exports = {};\n\nimport './objecteditinghub.css';\nimport googAsserts from 'goog/asserts.js';\n\nimport gmfEditingXSDAttributes from 'gmf/editing/XSDAttributes.js';\nimport gmfObjecteditingManager from 'gmf/objectediting/Manager.js';\nimport gmfThemeThemes from 'gmf/theme/Themes.js';\nimport olFormatWFS from 'ol/format/WFS.js';\nimport ngeoFormatXSDAttribute from 'ngeo/format/XSDAttribute.js';\n\n\n/** @type {!angular.Module} **/\nexports.module = angular.module('gmfapp', [\n  'gettext',\n  gmfEditingXSDAttributes.module.name,\n  gmfObjecteditingManager.module.name,\n  gmfThemeThemes.module.name,\n]);\n\n\nexports.module.value('gmfTreeUrl',\n  'https://geomapfish-demo.camptocamp.net/2.2/wsgi/themes?version=2&background=background');\n\n\nexports.module.value('gmfLayersUrl',\n  'https://geomapfish-demo.camptocamp.net/2.2/wsgi/layers/');\n\nexports.module.constant('defaultTheme', 'Demo');\nexports.module.constant('angularLocaleScript', '../build/angular-locale_{{locale}}.js');\n\n\n/**\n * @param {angular.$http} $http Angular $http service.\n * @param {angular.$q} $q Angular $q service.\n * @param {!angular.Scope} $scope Angular scope.\n * @param {gmf.theme.Themes} gmfThemes The gmf themes service.\n * @param {gmf.editing.XSDAttributes} gmfXSDAttributes The gmf XSDAttributes service.\n * @constructor\n * @ngInject\n */\nexports.MainController = function($http, $q, $scope, gmfThemes, gmfXSDAttributes) {\n\n  /**\n   * @type {angular.$http}\n   * @private\n   */\n  this.http_ = $http;\n\n  /**\n   * @type {angular.$q}\n   * @private\n   */\n  this.q_ = $q;\n\n  /**\n   * @type {gmf.theme.Themes}\n   * @private\n   */\n  this.gmfThemes_ = gmfThemes;\n\n  /**\n   * @type {gmf.editing.XSDAttributes}\n   * @private\n   */\n  this.gmfXSDAttributes_ = gmfXSDAttributes;\n\n  /**\n   * @type {Array.<string>} List of example and application urls that contain\n   *     ObjectEditing tools.\n   * @export\n   */\n  this.urls = [\n    {\n      'name': 'oeedit app. (hosted)',\n      'url': 'apps/oeedit/'\n    },\n    {\n      'name': 'oeedit app. (dev)',\n      'url': '../apps/oeedit/'\n    },\n    {\n      'name': 'example',\n      'url': 'objectediting.html'\n    }\n  ];\n\n  /**\n   * @type {string} OE viewer application base url when developping.\n   * @private\n   */\n  this.viewerUrlDev_ = '../apps/oeview/';\n\n  /**\n   * @type {string} OE viewer application base url when hosted.\n   * @private\n   */\n  this.viewerUrlHosted_ = 'apps/oeview/';\n\n  /**\n   * @type {Object.<string, string>}\n   * @export\n   */\n  this.selectedUrl = this.urls[0];\n\n  /**\n   * @type {gmfThemes.GmfOgcServers} ogcServers OGC servers.\n   * @private\n   */\n  this.gmfServers_;\n\n  /**\n   * @type {gmfThemes.GmfOgcServer} ogcServer OGC server to use.\n   * @private\n   */\n  this.gmfServer_;\n\n  /**\n   * @type {Array.<gmfThemes.GmfLayerWMS>}\n   * @export\n   */\n  this.gmfLayerNodes = [];\n\n  /**\n   * @type {?gmfThemes.GmfLayerWMS}\n   * @export\n   */\n  this.selectedGmfLayerNode = null;\n\n  /**\n   * @type {Object.<number, Array.<ol.Feature>>}\n   * @export\n   */\n  this.featuresCache_ = {};\n\n  /**\n   * @type {Array.<ol.Feature>}\n   * @export\n   */\n  this.features = null;\n\n  /**\n   * @type {?ol.Feature}\n   * @export\n   */\n  this.selectedFeature = null;\n\n  /**\n   * @type {Object.<number, string>}\n   * @private\n   */\n  this.geomTypeCache_ = {};\n\n  /**\n   * @type {string|undefined}\n   * @export\n   */\n  this.selectedGeomType = undefined;\n\n  $scope.$watch(\n    () => this.selectedGmfLayerNode,\n    (newVal, oldVal) => {\n      this.selectedFeature = null;\n\n      if (newVal) {\n        this.getFeatures_(newVal).then(\n          this.handleGetFeatures_.bind(this, newVal)\n        );\n        this.getGeometryType_(newVal).then(\n          this.handleGetGeometryType_.bind(this, newVal)\n        );\n      }\n    }\n  );\n\n  /**\n   * @type {string}\n   * @export\n   */\n  this.themeName = 'ObjectEditing';\n\n  this.gmfThemes_.loadThemes();\n\n  this.gmfThemes_.getOgcServersObject().then((ogcServers) => {\n\n    // (1) Set OGC servers\n    this.gmfServers_ = ogcServers;\n\n    this.gmfThemes_.getThemesObject().then((themes) => {\n      if (!themes) {\n        return;\n      }\n\n      let i, ii;\n\n      // (2) Find OE theme\n      let theme;\n      for (i = 0, ii = themes.length; i < ii; i++) {\n        if (themes[i].name === this.themeName) {\n          theme = themes[i];\n          break;\n        }\n      }\n\n      if (!theme) {\n        return;\n      }\n\n      // (3) Get first group node\n      const groupNode = theme.children[0];\n\n      // (4) Set OGC server, which must support WFS for this example to work\n      googAsserts.assert(groupNode.ogcServer);\n      const gmfServer = this.gmfServers_[groupNode.ogcServer];\n      if (gmfServer && gmfServer.wfsSupport === true && gmfServer.urlWfs) {\n        this.gmfServer_ = gmfServer;\n      } else {\n        return;\n      }\n\n      const gmfLayerNodes = [];\n      for (i = 0, ii = groupNode.children.length; i < ii; i++) {\n        if (groupNode.children[i].metadata.identifierAttributeField) {\n          gmfLayerNodes.push(groupNode.children[i]);\n        }\n      }\n\n      // (5) Set layer nodes\n      this.gmfLayerNodes = gmfLayerNodes;\n\n      // (6) Select 'polygon' for the purpose of simplifying the demo\n      this.selectedGmfLayerNode = this.gmfLayerNodes[1];\n\n    });\n  });\n\n};\n\n\n/**\n * @export\n */\nexports.MainController.prototype.runEditor = function() {\n\n  const geomType = this.selectedGeomType;\n  const feature = this.selectedFeature;\n  const layer = this.selectedGmfLayerNode.id;\n  const property = this.selectedGmfLayerNode.metadata.identifierAttributeField;\n  googAsserts.assert(property !== undefined);\n  const id = feature.get(property);\n\n  const params = {};\n  params[gmfObjecteditingManager.Param.GEOM_TYPE] = geomType;\n  params[gmfObjecteditingManager.Param.ID] = id;\n  params[gmfObjecteditingManager.Param.LAYER] = layer;\n  params[gmfObjecteditingManager.Param.THEME] = this.themeName;\n  params[gmfObjecteditingManager.Param.PROPERTY] = property;\n\n  const url = exports.MainController.appendParams(this.selectedUrl['url'], params);\n  window.open(url);\n};\n\n\n/**\n * @export\n */\nexports.MainController.prototype.runViewerDev = function() {\n  this.runViewer_(this.viewerUrlDev_);\n};\n\n\n/**\n * @export\n */\nexports.MainController.prototype.runViewerHosted = function() {\n  this.runViewer_(this.viewerUrlHosted_);\n};\n\n\n/**\n * @param {string} baseUrl Base url of the viewer.\n * @private\n */\nexports.MainController.prototype.runViewer_ = function(baseUrl) {\n\n  const node = this.selectedGmfLayerNode;\n  const nodeId = node.id;\n  const nodeName = node.name;\n  const nodeIdAttrFieldName = node.metadata.identifierAttributeField;\n  googAsserts.assert(nodeIdAttrFieldName !== undefined);\n  const ids = [];\n\n  const features = this.featuresCache_[nodeId];\n  for (let i = 0, ii = features.length; i < ii; i++) {\n    ids.push(\n      features[i].get(nodeIdAttrFieldName)\n    );\n  }\n\n  const params = {};\n  params['wfs_layer'] = nodeName;\n  params[`wfs_${nodeIdAttrFieldName}`] = ids.join(',');\n\n  const url = exports.MainController.appendParams(baseUrl, params);\n  window.open(url);\n};\n\n\n/**\n * @param {gmfThemes.GmfLayerWMS} gmfLayerNode Layer node.\n * @return {angular.$q.Promise} The promise attached to the deferred object.\n * @private\n */\nexports.MainController.prototype.getFeatures_ = function(gmfLayerNode) {\n\n  this.getFeaturesDeferred_ = this.q_.defer();\n\n  const features = this.getFeaturesFromCache_(gmfLayerNode);\n\n  if (features) {\n    this.getFeaturesDeferred_.resolve();\n  } else {\n    this.issueGetFeatures_(gmfLayerNode);\n  }\n\n  return this.getFeaturesDeferred_.promise;\n};\n\n\n/**\n * @param {gmfThemes.GmfLayerWMS} gmfLayerNode Layer node.\n * @private\n */\nexports.MainController.prototype.issueGetFeatures_ = function(gmfLayerNode) {\n\n  const id = gmfLayerNode.id;\n\n  const url = exports.MainController.appendParams(\n    this.gmfServer_.urlWfs,\n    {\n      'SERVICE': 'WFS',\n      'REQUEST': 'GetFeature',\n      'VERSION': '1.1.0',\n      'TYPENAME': gmfLayerNode.layers\n    }\n  );\n\n  this.http_.get(url).then((response) => {\n    const features = new olFormatWFS().readFeatures(response.data);\n    this.featuresCache_[id] = features;\n    this.getFeaturesDeferred_.resolve();\n  });\n};\n\n\n/**\n * @param {gmfThemes.GmfLayerWMS} gmfLayerNode Layer node.\n * @private\n */\nexports.MainController.prototype.handleGetFeatures_ = function(gmfLayerNode) {\n  const features = /** @type Array.<ol.Feature> */ (\n    this.getFeaturesFromCache_(gmfLayerNode));\n  this.features = features;\n  this.selectedFeature = this.features[0];\n};\n\n\n/**\n * @param {gmfThemes.GmfLayerWMS} gmfLayerNode Layer node.\n * @return {?Array.<ol.Feature>} List of features\n * @private\n */\nexports.MainController.prototype.getFeaturesFromCache_ = function(gmfLayerNode) {\n  const id = gmfLayerNode.id;\n  const features = this.featuresCache_[id] || null;\n  return features;\n};\n\n\n/**\n * @param {gmfThemes.GmfLayerWMS} gmfLayerNode Layer node.\n * @return {angular.$q.Promise} The promise attached to the deferred object.\n * @private\n */\nexports.MainController.prototype.getGeometryType_ = function(gmfLayerNode) {\n\n  this.getGeometryTypeDeferred_ = this.q_.defer();\n\n  const geomType = this.getGeometryTypeFromCache_(gmfLayerNode);\n\n  if (geomType) {\n    this.getGeometryTypeDeferred_.resolve();\n  } else {\n    this.issueGetAttributesRequest_(gmfLayerNode);\n  }\n\n  return this.getGeometryTypeDeferred_.promise;\n};\n\n\n/**\n * @param {gmfThemes.GmfLayerWMS} gmfLayerNode Layer node.\n * @private\n */\nexports.MainController.prototype.issueGetAttributesRequest_ = function(\n  gmfLayerNode\n) {\n\n  this.gmfXSDAttributes_.getAttributes(gmfLayerNode.id).then(\n    function(gmfLayerNode, attributes) {\n      // Get geom type from attributes and set\n      const geomAttr = ngeoFormatXSDAttribute.getGeometryAttribute(attributes);\n      if (geomAttr && geomAttr.geomType) {\n        this.geomTypeCache_[gmfLayerNode.id] = geomAttr.geomType;\n        this.getGeometryTypeDeferred_.resolve();\n      }\n    }.bind(this, gmfLayerNode)\n  );\n\n};\n\n\n/**\n * @param {gmfThemes.GmfLayerWMS} gmfLayerNode Layer node.\n * @private\n */\nexports.MainController.prototype.handleGetGeometryType_ = function(gmfLayerNode) {\n  const geomType = this.getGeometryTypeFromCache_(gmfLayerNode);\n  this.selectedGeomType = geomType;\n};\n\n\n/**\n * @param {gmfThemes.GmfLayerWMS} gmfLayerNode Layer node.\n * @return {string|undefined} The type of geometry.\n * @private\n */\nexports.MainController.prototype.getGeometryTypeFromCache_ = function(\n  gmfLayerNode\n) {\n  const id = gmfLayerNode.id;\n  const geomType = this.geomTypeCache_[id];\n  return geomType;\n};\n\n\n/**\n * Appends query parameters to a URI.\n *\n * @param {string} uri The original URI, which may already have query data.\n * @param {!Object} params An object where keys are URI-encoded parameter keys,\n *     and the values are arbitrary types or arrays.\n * @return {string} The new URI.\n */\nexports.MainController.appendParams = function(uri, params) {\n  const keyParams = [];\n  // Skip any null or undefined parameter values\n  Object.keys(params).forEach((k) => {\n    if (params[k] !== null && params[k] !== undefined) {\n      keyParams.push(`${k}=${encodeURIComponent(params[k])}`);\n    }\n  });\n  const qs = keyParams.join('&');\n  // remove any trailing ? or &\n  uri = uri.replace(/[?&]$/, '');\n  // append ? or & depending on whether uri has existing parameters\n  uri = uri.indexOf('?') === -1 ? `${uri}?` : `${uri}&`;\n  return uri + qs;\n};\n\n\nexports.module.controller('MainController', exports.MainController);\n\n\nexport default exports;\n\n\n\n// WEBPACK FOOTER //\n// ./contribs/gmf/examples/objecteditinghub.js"],"sourceRoot":""}